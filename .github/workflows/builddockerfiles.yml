name: Build and Push to Public ECR

on:
  push:
    branches:
      - 'feature/**'
    tags:
      - 'v*.*.*'
    paths-ignore:
      - 'docker/**'
      - '.github/workflows/builddockerfiles.yml'
      - '.env'
  pull_request:
    branches:
      - master
    paths-ignore:
      - 'docker/**'
      - '.github/workflows/builddockerfiles.yml'
      - '.env'

env:
  TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
  TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}

jobs:
  build-and-push:
    name: Build and push docker image to ECR
    #if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest

    env:
      IMAGE_NAME: ${{ vars.IMAGE_NAME }}
      IMAGE_URI: ${{ vars.IMAGE_URI }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1  # Required for public ECR

      - name: Log in to Amazon ECR Public
        run: |
          aws ecr-public get-login-password --region us-east-1 \
            | docker login --username AWS --password-stdin public.ecr.aws/g6z5u7d0           

      - name: Build and Push Image          
        run: |
          docker build -t $IMAGE_NAME .

          # Tag with commit SHA
          docker tag $IMAGE_NAME $IMAGE_URI:${{ github.sha }}
          docker push $IMAGE_URI:${{ github.sha }}

          # Tag as latest
          docker tag $IMAGE_NAME $IMAGE_URI:latest
          docker push $IMAGE_URI:latest

          # Tag as branch (e.g. master)
          if [[ "${{ github.ref }}" == "refs/heads/master" ]]; then
            docker tag $IMAGE_NAME $IMAGE_URI:master
            docker push $IMAGE_URI:master
          fi

          if [[ "${{ github.ref }}" =~ refs/tags/v[0-9]+\.[0-9]+\.[0-9]+ ]]; then
            TAG=${GITHUB_REF#refs/tags/}
            docker tag $IMAGE_NAME $IMAGE_URI:$TAG
            docker push $IMAGE_URI:$TAG
          fi
  
  deploy-to-ec2:
    name: Deploy to EC2 on master
    runs-on: ubuntu-latest
    needs: build-and-push

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Write SSH key to file
        run: |
          echo "${{ secrets.EC2_KEY }}" > ec2_key.pem
          chmod 600 ec2_key.pem

      - name: Append dummy comment to trigger watcher
        run: echo "# updated at $(date)" >> docker/docker-compose.yml

      - name: SCP to EC2
        run: |
          scp -i ec2_key.pem -o StrictHostKeyChecking=no docker/docker-compose.yml \
            ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:${{ vars.EC2_PATH_PROJECT }}/docker/docker-compose.yml
        continue-on-error: true
                
         
  notify_failure:
    name: Notify Failure on Telegram
    if: failure()
    runs-on: ubuntu-latest
    needs: [build-and-push, deploy-to-ec2]
    steps:
      - name: Send Telegram Message
        run: |
          MESSAGE="ðŸš¨ GitHub Action Job FAILED\nRepo: ${{ github.repository }}\nBranch: ${{ github.ref }}\nCommit: ${{ github.sha }}\nJob: ${{ github.job }}"
          curl -s -X POST https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage \
            -d chat_id=$TELEGRAM_CHAT_ID \
            -d text="$MESSAGE"
