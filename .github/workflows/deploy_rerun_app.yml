name: Deploy App to EC2 instance

on:
    push:
      branches:
        - 'feature/**'
      tags:
        - 'v*.*.*'
      paths:
        - 'docker/**'
        - '.github/workflows/**'
    pull_request:
      branches:
        - master
      paths:
        - 'docker/**'
        - '.github/workflows/**'

env:
  TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
  TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}

jobs: 
  
  deploy-to-ec2:
    name: Deploy app to EC2
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Write SSH key to file
        run: |
          echo "${{ secrets.EC2_KEY }}" > ec2_key.pem
          chmod 600 ec2_key.pem

      - name: Append dummy comment to trigger watcher
        run: echo "# updated at $(date)" >> docker/docker-compose.yml

      - name: Upload docker-compose.yml to S3
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Upload file to S3 bucket
        run: |
          aws s3 cp docker/docker-compose.yml s3://${{ vars.S3_PATH_TO_COMPOSE_FILE }}/docker-compose.yml

      - name: Create .env file
        run: |
          cat <<EOF > .env
          ACCESS_TOKEN_SALT=${{ secrets.ACCESS_TOKEN_SALT }}
          JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}
          POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
          COMPOSE_PROJECT_NAME=${{ secrets.COMPOSE_PROJECT_NAME }}
          POSTGRES_HOST=${{ secrets.POSTGRES_HOST }}
          POSTGRES_USER=${{ secrets.POSTGRES_USER }}
          POSTGRES_DB=${{ secrets.POSTGRES_DB }}
          DATABASE_URL=postgresql://${{ secrets.POSTGRES_USER }}:${{ secrets.POSTGRES_PASSWORD }}@${{ secrets.POSTGRES_HOST }}:5432/${{ secrets.POSTGRES_DB }}?connect_timeout=300&sslmode=require
          REDIS_HOST=${{ secrets.REDIS_HOST }}
          REDIS_USER=${{ secrets.REDIS_USER }}
          REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}
          REDIS_PORT=${{ secrets.REDIS_PORT }}
          EOF

      - name: Copy .env to EC2
        run: |
          scp -o StrictHostKeyChecking=no -i ec2_key.pem .env ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:${{ vars.EC2_PATH_PROJECT }}/.env
        continue-on-error: true       

      - name: Run remote deploy script
        run: |
          ssh -i ec2_key.pem -o StrictHostKeyChecking=no \
            ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} \
            'bash /home/ubuntu/projects/deploy.sh'
        continue-on-error: true                      
         
  notify_failure:
    name: Notify Failure on Telegram
    if: failure()
    runs-on: ubuntu-latest
    needs: [deploy-to-ec2]
    steps:
      - name: Send Telegram Message
        run: |
          MESSAGE="ðŸš¨ GitHub Action Job FAILED\nRepo: ${{ github.repository }}\nBranch: ${{ github.ref }}\nCommit: ${{ github.sha }}\nJob: ${{ github.job }}"
          curl -s -X POST https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage \
            -d chat_id=$TELEGRAM_CHAT_ID \
            -d text="$MESSAGE"
